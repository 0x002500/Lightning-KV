name: Rust Build

on:
  push:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-v20.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-v20.04
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          override: true

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Build Executable
        run: cargo build --release --target ${{ matrix.target }}

      # Rename and move binary on Unix-based systems
      - name: Rename and Move Binary (Unix)
        if: runner.os != 'Windows'
        id: rename_unix
        run: |
          mkdir -p release
          BIN_NAME="lightning-kv"  # Replace with your binary name
          NEW_NAME="${BIN_NAME}-${{ matrix.target }}"
          mv target/${{ matrix.target }}/release/${BIN_NAME} release/${NEW_NAME}
          echo "binary_name=${NEW_NAME}" >> $GITHUB_OUTPUT
        shell: bash

      # Rename and move binary on Windows
      - name: Rename and Move Binary (Windows)
        if: runner.os == 'Windows'
        id: rename_windows
        run: |
          mkdir release
          $binaryName = "lightning-kv-${{ matrix.target }}.exe"  # Replace with your binary name
          Move-Item "target\\${{ matrix.target }}\\release\\lightning-kv.exe" "release\\$binaryName"
          echo "binary_name=$binaryName" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Generate MD5 checksum on Unix-based systems
      - name: Generate MD5 Checksum (Unix)
        if: runner.os != 'Windows'
        run: |
          cd release
          BIN_FILE="${{ steps.rename_unix.outputs.binary_name }}"
          md5sum "$BIN_FILE" > "${BIN_FILE}.md5"
        shell: bash

      # Generate MD5 checksum on Windows
      - name: Generate MD5 Checksum (Windows)
        if: runner.os == 'Windows'
        run: |
          $binaryName = "${{ steps.rename_windows.outputs.binary_name }}"
          $binaryPath = "release\\$binaryName"
          $hash = Get-FileHash -Algorithm MD5 -Path $binaryPath
          $hash.Hash | Out-File -Encoding ascii -FilePath "$binaryPath.md5"
        shell: pwsh

      # Upload the build artifacts using upload-artifact@v4
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.target }}-${{ runner.os }}-artifact"
          path: release/
